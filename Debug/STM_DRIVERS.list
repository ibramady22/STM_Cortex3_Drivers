
STM_DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000052c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800065c  08000664  00010664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800065c  0800065c  00010664  2**0
                  CONTENTS
  4 .ARM          00000000  0800065c  0800065c  00010664  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800065c  08000664  00010664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800065c  0800065c  0001065c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000660  08000660  00010660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000000  08000664  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000664  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010664  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011eb  00000000  00000000  0001068d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008f4  00000000  00000000  00011878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000270  00000000  00000000  00012170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d8  00000000  00000000  000123e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001129  00000000  00000000  000125b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001583  00000000  00000000  000136e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004837  00000000  00000000  00014c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001949b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000748  00000000  00000000  000194ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000644 	.word	0x08000644

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000644 	.word	0x08000644

08000170 <RCC_voidEnableClock>:
#include "RCC_private.h"
#include "RCC_config.h"


void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PerId)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
	/* input validation */
	if(Copy_u8PerId>31) 
 8000180:	79bb      	ldrb	r3, [r7, #6]
 8000182:	2b1f      	cmp	r3, #31
 8000184:	d92b      	bls.n	80001de <RCC_voidEnableClock+0x6e>
	{
		switch (Copy_u8BusId)
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2b02      	cmp	r3, #2
 800018a:	d01c      	beq.n	80001c6 <RCC_voidEnableClock+0x56>
 800018c:	2b02      	cmp	r3, #2
 800018e:	dc25      	bgt.n	80001dc <RCC_voidEnableClock+0x6c>
 8000190:	2b00      	cmp	r3, #0
 8000192:	d002      	beq.n	800019a <RCC_voidEnableClock+0x2a>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d00b      	beq.n	80001b0 <RCC_voidEnableClock+0x40>
		{
			case RCC_AHB  :  SET_BIT(RCC_AHBENR,Copy_u8PerId) ;                                break;
			case RCC_APB1 :  SET_BIT(RCC_APB1ENR,Copy_u8PerId) ;                               break;
			case RCC_APB2 :  SET_BIT(RCC_APB2ENR,Copy_u8PerId) ;                               break;
		    default       :           /*return error */                                        break;
 8000198:	e020      	b.n	80001dc <RCC_voidEnableClock+0x6c>
			case RCC_AHB  :  SET_BIT(RCC_AHBENR,Copy_u8PerId) ;                                break;
 800019a:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <RCC_voidEnableClock+0x78>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	79ba      	ldrb	r2, [r7, #6]
 80001a0:	2101      	movs	r1, #1
 80001a2:	fa01 f202 	lsl.w	r2, r1, r2
 80001a6:	4611      	mov	r1, r2
 80001a8:	4a0f      	ldr	r2, [pc, #60]	; (80001e8 <RCC_voidEnableClock+0x78>)
 80001aa:	430b      	orrs	r3, r1
 80001ac:	6013      	str	r3, [r2, #0]
 80001ae:	e016      	b.n	80001de <RCC_voidEnableClock+0x6e>
			case RCC_APB1 :  SET_BIT(RCC_APB1ENR,Copy_u8PerId) ;                               break;
 80001b0:	4b0e      	ldr	r3, [pc, #56]	; (80001ec <RCC_voidEnableClock+0x7c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	79ba      	ldrb	r2, [r7, #6]
 80001b6:	2101      	movs	r1, #1
 80001b8:	fa01 f202 	lsl.w	r2, r1, r2
 80001bc:	4611      	mov	r1, r2
 80001be:	4a0b      	ldr	r2, [pc, #44]	; (80001ec <RCC_voidEnableClock+0x7c>)
 80001c0:	430b      	orrs	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	e00b      	b.n	80001de <RCC_voidEnableClock+0x6e>
			case RCC_APB2 :  SET_BIT(RCC_APB2ENR,Copy_u8PerId) ;                               break;
 80001c6:	4b0a      	ldr	r3, [pc, #40]	; (80001f0 <RCC_voidEnableClock+0x80>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	79ba      	ldrb	r2, [r7, #6]
 80001cc:	2101      	movs	r1, #1
 80001ce:	fa01 f202 	lsl.w	r2, r1, r2
 80001d2:	4611      	mov	r1, r2
 80001d4:	4a06      	ldr	r2, [pc, #24]	; (80001f0 <RCC_voidEnableClock+0x80>)
 80001d6:	430b      	orrs	r3, r1
 80001d8:	6013      	str	r3, [r2, #0]
 80001da:	e000      	b.n	80001de <RCC_voidEnableClock+0x6e>
		    default       :           /*return error */                                        break;
 80001dc:	bf00      	nop
	}
	else
	{
		/*return error */
	}
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	40021014 	.word	0x40021014
 80001ec:	4002101c 	.word	0x4002101c
 80001f0:	40021018 	.word	0x40021018

080001f4 <RCC_InitSysClock>:
	}
}


void RCC_InitSysClock(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
	#elif   RCC_CLOCK_TYPE == RCC_HSE_RC 
	    RCC_CR = 0x00050000;    /* enable HSE with  bypass */
		/*suppose AHB==Source  APB1==APB2==AHB   no_prescaller*/
		RCC_CFGR = 0x00000001;  /* make HSE the source clock */
	#elif   RCC_CLOCK_TYPE == RCC_HSI  
	    RCC_CR = 0x00000081;    /* enable HSI + trimming =0 */
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <RCC_InitSysClock+0x18>)
 80001fa:	2281      	movs	r2, #129	; 0x81
 80001fc:	601a      	str	r2, [r3, #0]
		/*suppose AHB==Source  APB1==APB2==AHB   no_prescaller*/
		RCC_CFGR = 0x00000000;  /* make HSI the source clock */
 80001fe:	4b04      	ldr	r3, [pc, #16]	; (8000210 <RCC_InitSysClock+0x1c>)
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
//        #endif
//
    #else   
            #error("you choiced wrong clock")
    #endif		
}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40021000 	.word	0x40021000
 8000210:	40021004 	.word	0x40021004

08000214 <GPIO_voidSetPinDirection>:
#include "GPIO_config.h"



void GPIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Mode)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
 800021e:	460b      	mov	r3, r1
 8000220:	71bb      	strb	r3, [r7, #6]
 8000222:	4613      	mov	r3, r2
 8000224:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8PortID)
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	2b02      	cmp	r3, #2
 800022a:	d07a      	beq.n	8000322 <GPIO_voidSetPinDirection+0x10e>
 800022c:	2b02      	cmp	r3, #2
 800022e:	f300 80b1 	bgt.w	8000394 <GPIO_voidSetPinDirection+0x180>
 8000232:	2b00      	cmp	r3, #0
 8000234:	d002      	beq.n	800023c <GPIO_voidSetPinDirection+0x28>
 8000236:	2b01      	cmp	r3, #1
 8000238:	d03a      	beq.n	80002b0 <GPIO_voidSetPinDirection+0x9c>
			/* Return Error */
		}
	break;
	default:
		/* Return Error*/
	break;
 800023a:	e0ab      	b.n	8000394 <GPIO_voidSetPinDirection+0x180>
		if(Copy_u8PinID <= 7)
 800023c:	79bb      	ldrb	r3, [r7, #6]
 800023e:	2b07      	cmp	r3, #7
 8000240:	d817      	bhi.n	8000272 <GPIO_voidSetPinDirection+0x5e>
			GPIOA_CRL &= ~ ((0b1111)<< (Copy_u8PinID*4));  /* Reset Register*/
 8000242:	4b5a      	ldr	r3, [pc, #360]	; (80003ac <GPIO_voidSetPinDirection+0x198>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	79ba      	ldrb	r2, [r7, #6]
 8000248:	0092      	lsls	r2, r2, #2
 800024a:	210f      	movs	r1, #15
 800024c:	fa01 f202 	lsl.w	r2, r1, r2
 8000250:	43d2      	mvns	r2, r2
 8000252:	4611      	mov	r1, r2
 8000254:	4a55      	ldr	r2, [pc, #340]	; (80003ac <GPIO_voidSetPinDirection+0x198>)
 8000256:	400b      	ands	r3, r1
 8000258:	6013      	str	r3, [r2, #0]
			GPIOA_CRL |=   ((Copy_u8Mode)<< (Copy_u8PinID*4)); /*set Mode */
 800025a:	4b54      	ldr	r3, [pc, #336]	; (80003ac <GPIO_voidSetPinDirection+0x198>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	7979      	ldrb	r1, [r7, #5]
 8000260:	79ba      	ldrb	r2, [r7, #6]
 8000262:	0092      	lsls	r2, r2, #2
 8000264:	fa01 f202 	lsl.w	r2, r1, r2
 8000268:	4611      	mov	r1, r2
 800026a:	4a50      	ldr	r2, [pc, #320]	; (80003ac <GPIO_voidSetPinDirection+0x198>)
 800026c:	430b      	orrs	r3, r1
 800026e:	6013      	str	r3, [r2, #0]
	break;
 8000270:	e092      	b.n	8000398 <GPIO_voidSetPinDirection+0x184>
		else if (Copy_u8PinID <= 15)
 8000272:	79bb      	ldrb	r3, [r7, #6]
 8000274:	2b0f      	cmp	r3, #15
 8000276:	f200 808f 	bhi.w	8000398 <GPIO_voidSetPinDirection+0x184>
			Copy_u8PinID -=8; /*Mapping*/
 800027a:	79bb      	ldrb	r3, [r7, #6]
 800027c:	3b08      	subs	r3, #8
 800027e:	71bb      	strb	r3, [r7, #6]
			GPIOA_CRH &= ~ ((0b1111)<< (Copy_u8PinID*4));  /* Reset Register*/
 8000280:	4b4b      	ldr	r3, [pc, #300]	; (80003b0 <GPIO_voidSetPinDirection+0x19c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	79ba      	ldrb	r2, [r7, #6]
 8000286:	0092      	lsls	r2, r2, #2
 8000288:	210f      	movs	r1, #15
 800028a:	fa01 f202 	lsl.w	r2, r1, r2
 800028e:	43d2      	mvns	r2, r2
 8000290:	4611      	mov	r1, r2
 8000292:	4a47      	ldr	r2, [pc, #284]	; (80003b0 <GPIO_voidSetPinDirection+0x19c>)
 8000294:	400b      	ands	r3, r1
 8000296:	6013      	str	r3, [r2, #0]
			GPIOA_CRH |=   ((Copy_u8Mode)<< (Copy_u8PinID*4)); /*set Mode */
 8000298:	4b45      	ldr	r3, [pc, #276]	; (80003b0 <GPIO_voidSetPinDirection+0x19c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	7979      	ldrb	r1, [r7, #5]
 800029e:	79ba      	ldrb	r2, [r7, #6]
 80002a0:	0092      	lsls	r2, r2, #2
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	4611      	mov	r1, r2
 80002a8:	4a41      	ldr	r2, [pc, #260]	; (80003b0 <GPIO_voidSetPinDirection+0x19c>)
 80002aa:	430b      	orrs	r3, r1
 80002ac:	6013      	str	r3, [r2, #0]
	break;
 80002ae:	e073      	b.n	8000398 <GPIO_voidSetPinDirection+0x184>
		if(Copy_u8PinID <= 7)
 80002b0:	79bb      	ldrb	r3, [r7, #6]
 80002b2:	2b07      	cmp	r3, #7
 80002b4:	d817      	bhi.n	80002e6 <GPIO_voidSetPinDirection+0xd2>
			GPIOB_CRL &= ~ ((0b1111)<< (Copy_u8PinID*4));  /* Reset Register*/
 80002b6:	4b3f      	ldr	r3, [pc, #252]	; (80003b4 <GPIO_voidSetPinDirection+0x1a0>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	79ba      	ldrb	r2, [r7, #6]
 80002bc:	0092      	lsls	r2, r2, #2
 80002be:	210f      	movs	r1, #15
 80002c0:	fa01 f202 	lsl.w	r2, r1, r2
 80002c4:	43d2      	mvns	r2, r2
 80002c6:	4611      	mov	r1, r2
 80002c8:	4a3a      	ldr	r2, [pc, #232]	; (80003b4 <GPIO_voidSetPinDirection+0x1a0>)
 80002ca:	400b      	ands	r3, r1
 80002cc:	6013      	str	r3, [r2, #0]
			GPIOB_CRL |=   ((Copy_u8Mode)<< (Copy_u8PinID*4)); /*set Mode */
 80002ce:	4b39      	ldr	r3, [pc, #228]	; (80003b4 <GPIO_voidSetPinDirection+0x1a0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	7979      	ldrb	r1, [r7, #5]
 80002d4:	79ba      	ldrb	r2, [r7, #6]
 80002d6:	0092      	lsls	r2, r2, #2
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	4611      	mov	r1, r2
 80002de:	4a35      	ldr	r2, [pc, #212]	; (80003b4 <GPIO_voidSetPinDirection+0x1a0>)
 80002e0:	430b      	orrs	r3, r1
 80002e2:	6013      	str	r3, [r2, #0]
	break;
 80002e4:	e05a      	b.n	800039c <GPIO_voidSetPinDirection+0x188>
		else if (Copy_u8PinID <= 15)
 80002e6:	79bb      	ldrb	r3, [r7, #6]
 80002e8:	2b0f      	cmp	r3, #15
 80002ea:	d857      	bhi.n	800039c <GPIO_voidSetPinDirection+0x188>
			Copy_u8PinID -=8; /*Mapping*/
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	3b08      	subs	r3, #8
 80002f0:	71bb      	strb	r3, [r7, #6]
			GPIOB_CRH &= ~ ((0b1111)<< (Copy_u8PinID*4));  /* Reset Register*/
 80002f2:	4b31      	ldr	r3, [pc, #196]	; (80003b8 <GPIO_voidSetPinDirection+0x1a4>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	79ba      	ldrb	r2, [r7, #6]
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	210f      	movs	r1, #15
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	43d2      	mvns	r2, r2
 8000302:	4611      	mov	r1, r2
 8000304:	4a2c      	ldr	r2, [pc, #176]	; (80003b8 <GPIO_voidSetPinDirection+0x1a4>)
 8000306:	400b      	ands	r3, r1
 8000308:	6013      	str	r3, [r2, #0]
			GPIOB_CRH |=   ((Copy_u8Mode)<< (Copy_u8PinID*4)); /*set Mode */
 800030a:	4b2b      	ldr	r3, [pc, #172]	; (80003b8 <GPIO_voidSetPinDirection+0x1a4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	7979      	ldrb	r1, [r7, #5]
 8000310:	79ba      	ldrb	r2, [r7, #6]
 8000312:	0092      	lsls	r2, r2, #2
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	4611      	mov	r1, r2
 800031a:	4a27      	ldr	r2, [pc, #156]	; (80003b8 <GPIO_voidSetPinDirection+0x1a4>)
 800031c:	430b      	orrs	r3, r1
 800031e:	6013      	str	r3, [r2, #0]
	break;
 8000320:	e03c      	b.n	800039c <GPIO_voidSetPinDirection+0x188>
		if(Copy_u8PinID <= 7)
 8000322:	79bb      	ldrb	r3, [r7, #6]
 8000324:	2b07      	cmp	r3, #7
 8000326:	d817      	bhi.n	8000358 <GPIO_voidSetPinDirection+0x144>
			GPIOC_CRL &= ~ ((0b1111)<< (Copy_u8PinID*4));  /* Reset Register*/
 8000328:	4b24      	ldr	r3, [pc, #144]	; (80003bc <GPIO_voidSetPinDirection+0x1a8>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	79ba      	ldrb	r2, [r7, #6]
 800032e:	0092      	lsls	r2, r2, #2
 8000330:	210f      	movs	r1, #15
 8000332:	fa01 f202 	lsl.w	r2, r1, r2
 8000336:	43d2      	mvns	r2, r2
 8000338:	4611      	mov	r1, r2
 800033a:	4a20      	ldr	r2, [pc, #128]	; (80003bc <GPIO_voidSetPinDirection+0x1a8>)
 800033c:	400b      	ands	r3, r1
 800033e:	6013      	str	r3, [r2, #0]
			GPIOC_CRL |=   ((Copy_u8Mode)<< (Copy_u8PinID*4)); /*set Mode */
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <GPIO_voidSetPinDirection+0x1a8>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	7979      	ldrb	r1, [r7, #5]
 8000346:	79ba      	ldrb	r2, [r7, #6]
 8000348:	0092      	lsls	r2, r2, #2
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	4611      	mov	r1, r2
 8000350:	4a1a      	ldr	r2, [pc, #104]	; (80003bc <GPIO_voidSetPinDirection+0x1a8>)
 8000352:	430b      	orrs	r3, r1
 8000354:	6013      	str	r3, [r2, #0]
	break;
 8000356:	e023      	b.n	80003a0 <GPIO_voidSetPinDirection+0x18c>
		else if (Copy_u8PinID <= 15)
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	2b0f      	cmp	r3, #15
 800035c:	d820      	bhi.n	80003a0 <GPIO_voidSetPinDirection+0x18c>
			Copy_u8PinID -=8; /*Mapping*/
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	3b08      	subs	r3, #8
 8000362:	71bb      	strb	r3, [r7, #6]
			GPIOC_CRH &= ~ ((0b1111)<< (Copy_u8PinID*4));  /* Reset Register*/
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <GPIO_voidSetPinDirection+0x1ac>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	79ba      	ldrb	r2, [r7, #6]
 800036a:	0092      	lsls	r2, r2, #2
 800036c:	210f      	movs	r1, #15
 800036e:	fa01 f202 	lsl.w	r2, r1, r2
 8000372:	43d2      	mvns	r2, r2
 8000374:	4611      	mov	r1, r2
 8000376:	4a12      	ldr	r2, [pc, #72]	; (80003c0 <GPIO_voidSetPinDirection+0x1ac>)
 8000378:	400b      	ands	r3, r1
 800037a:	6013      	str	r3, [r2, #0]
			GPIOC_CRH |=   ((Copy_u8Mode)<< (Copy_u8PinID*4)); /*set Mode */
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <GPIO_voidSetPinDirection+0x1ac>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	7979      	ldrb	r1, [r7, #5]
 8000382:	79ba      	ldrb	r2, [r7, #6]
 8000384:	0092      	lsls	r2, r2, #2
 8000386:	fa01 f202 	lsl.w	r2, r1, r2
 800038a:	4611      	mov	r1, r2
 800038c:	4a0c      	ldr	r2, [pc, #48]	; (80003c0 <GPIO_voidSetPinDirection+0x1ac>)
 800038e:	430b      	orrs	r3, r1
 8000390:	6013      	str	r3, [r2, #0]
	break;
 8000392:	e005      	b.n	80003a0 <GPIO_voidSetPinDirection+0x18c>
	break;
 8000394:	bf00      	nop
 8000396:	e004      	b.n	80003a2 <GPIO_voidSetPinDirection+0x18e>
	break;
 8000398:	bf00      	nop
 800039a:	e002      	b.n	80003a2 <GPIO_voidSetPinDirection+0x18e>
	break;
 800039c:	bf00      	nop
 800039e:	e000      	b.n	80003a2 <GPIO_voidSetPinDirection+0x18e>
	break;
 80003a0:	bf00      	nop
	}
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40010800 	.word	0x40010800
 80003b0:	40010804 	.word	0x40010804
 80003b4:	40010c00 	.word	0x40010c00
 80003b8:	40010c04 	.word	0x40010c04
 80003bc:	40011000 	.word	0x40011000
 80003c0:	40011004 	.word	0x40011004

080003c4 <EXTI0_IRQHandler>:

	EXTI0_CallBack = ptr;

}
void EXTI0_IRQHandler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

	EXTI0_CallBack();
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <EXTI0_IRQHandler+0x1c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4798      	blx	r3
	SET_BIT( EXIN->PR , 0 ); //flag
 80003ce:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <EXTI0_IRQHandler+0x20>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <EXTI0_IRQHandler+0x20>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6153      	str	r3, [r2, #20]

}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	2000001c 	.word	0x2000001c
 80003e4:	40010400 	.word	0x40010400

080003e8 <STK_voidInit>:
void (*STK_CALLBACK)(void);
static u8 single_interval=0; //Flag to single interval


void STK_voidInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	/* choose Clock  AHB/8*/
	WRITE_BIT( STK ->CTRL,2,AHB_8);
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <STK_voidInit+0x30>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a09      	ldr	r2, [pc, #36]	; (8000418 <STK_voidInit+0x30>)
 80003f2:	f023 0304 	bic.w	r3, r3, #4
 80003f6:	6013      	str	r3, [r2, #0]
	/*Disable STK Interrupt*/
	CLR_BIT(STK ->CTRL,1);
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <STK_voidInit+0x30>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a06      	ldr	r2, [pc, #24]	; (8000418 <STK_voidInit+0x30>)
 80003fe:	f023 0302 	bic.w	r3, r3, #2
 8000402:	6013      	str	r3, [r2, #0]
	/*Disable STK */
	CLR_BIT(STK ->CTRL,0);
 8000404:	4b04      	ldr	r3, [pc, #16]	; (8000418 <STK_voidInit+0x30>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a03      	ldr	r2, [pc, #12]	; (8000418 <STK_voidInit+0x30>)
 800040a:	f023 0301 	bic.w	r3, r3, #1
 800040e:	6013      	str	r3, [r2, #0]
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	e000e010 	.word	0xe000e010

0800041c <STK_voidSetBusyWait>:

void STK_voidSetBusyWait(u32 Copy_u32Ticks)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	/*Assign Load Reg*/
	STK->LOAD=Copy_u32Ticks;
 8000424:	4a0d      	ldr	r2, [pc, #52]	; (800045c <STK_voidSetBusyWait+0x40>)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6053      	str	r3, [r2, #4]
	/*Enable STK */
	SET_BIT(STK ->CTRL,0);
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <STK_voidSetBusyWait+0x40>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a0b      	ldr	r2, [pc, #44]	; (800045c <STK_voidSetBusyWait+0x40>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6013      	str	r3, [r2, #0]
	/*busy Wait on flag*/
	while( READ_BIT(STK ->CTRL,16)==0);
 8000436:	bf00      	nop
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <STK_voidSetBusyWait+0x40>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	0c1b      	lsrs	r3, r3, #16
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	2b00      	cmp	r3, #0
 8000444:	d0f8      	beq.n	8000438 <STK_voidSetBusyWait+0x1c>
	STK->LOAD=0;
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <STK_voidSetBusyWait+0x40>)
 8000448:	2200      	movs	r2, #0
 800044a:	605a      	str	r2, [r3, #4]
	STK->VAL=0;
 800044c:	4b03      	ldr	r3, [pc, #12]	; (800045c <STK_voidSetBusyWait+0x40>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	e000e010 	.word	0xe000e010

08000460 <SysTick_Handler>:
}


/* STK Handler*/
void SysTick_Handler(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	if(single_interval==1)
 8000464:	4b08      	ldr	r3, [pc, #32]	; (8000488 <SysTick_Handler+0x28>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d108      	bne.n	800047e <SysTick_Handler+0x1e>
	{
		single_interval=0;
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <SysTick_Handler+0x28>)
 800046e:	2200      	movs	r2, #0
 8000470:	701a      	strb	r2, [r3, #0]
		STK->LOAD=0;
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <SysTick_Handler+0x2c>)
 8000474:	2200      	movs	r2, #0
 8000476:	605a      	str	r2, [r3, #4]
		STK->VAL=0;
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <SysTick_Handler+0x2c>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
	}
	STK_CALLBACK();
 800047e:	4b04      	ldr	r3, [pc, #16]	; (8000490 <SysTick_Handler+0x30>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4798      	blx	r3
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000024 	.word	0x20000024
 800048c:	e000e010 	.word	0xe000e010
 8000490:	20000020 	.word	0x20000020

08000494 <DMA1_Channel1_IRQHandler>:
{
	DMA_CALLBACK_CH1=ptr;
}

void DMA1_Channel1_IRQHandler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	DMA_CALLBACK_CH1();
 8000498:	4b02      	ldr	r3, [pc, #8]	; (80004a4 <DMA1_Channel1_IRQHandler+0x10>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4798      	blx	r3
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000028 	.word	0x20000028

080004a8 <SPI1_IRQHandler>:
		/* send data */
		SPI -> DR=Copy_u8DataTrans;
		SPI_CALL_BACK=CallBack;
}

void SPI1_IRQHandler(void){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0

	SPI_CALL_BACK(SPI -> DR);
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <SPI1_IRQHandler+0x18>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <SPI1_IRQHandler+0x1c>)
 80004b2:	68d2      	ldr	r2, [r2, #12]
 80004b4:	b2d2      	uxtb	r2, r2
 80004b6:	4610      	mov	r0, r2
 80004b8:	4798      	blx	r3
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	2000002c 	.word	0x2000002c
 80004c4:	04013000 	.word	0x04013000

080004c8 <USART1_IRQHandler>:
{
		UART1_CallBack = ptr;
}

void USART1_IRQHandler (void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
		UART1_CallBack();
 80004cc:	4b02      	ldr	r3, [pc, #8]	; (80004d8 <USART1_IRQHandler+0x10>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4798      	blx	r3
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000030 	.word	0x20000030

080004dc <STP_voidSendDataSynchronous>:
#include "STP_interface.h"
#include "STP_config.h"
#include "STP_private.h"

void STP_voidSendDataSynchronous(u8 Copy_u8Data)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
	s8 Local_s8Counter;
	u8 Local_u8Bit;
	/* Start Sending Data from MSB */
	for(Local_s8Counter=7;Local_s8Counter>=0;Local_s8Counter--)
 80004e6:	2307      	movs	r3, #7
 80004e8:	73fb      	strb	r3, [r7, #15]
 80004ea:	e024      	b.n	8000536 <STP_voidSendDataSynchronous+0x5a>
	{
		Local_u8Bit=READ_BIT(Copy_u8Data,Local_s8Counter);
 80004ec:	79fa      	ldrb	r2, [r7, #7]
 80004ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004f2:	fa42 f303 	asr.w	r3, r2, r3
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	f003 0301 	and.w	r3, r3, #1
 80004fc:	73bb      	strb	r3, [r7, #14]
		GPIO_voidSetPinDirection(STP_SERIAL_DATA, Local_u8Bit);
 80004fe:	7bbb      	ldrb	r3, [r7, #14]
 8000500:	461a      	mov	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	2000      	movs	r0, #0
 8000506:	f7ff fe85 	bl	8000214 <GPIO_voidSetPinDirection>
		/* Pulse on Shifting Clock*/
		GPIO_voidSetPinDirection(STP_SHIFT_CLK, GPIO_LOW);
 800050a:	2200      	movs	r2, #0
 800050c:	2102      	movs	r1, #2
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fe80 	bl	8000214 <GPIO_voidSetPinDirection>
		STK_voidSetBusyWait(1); /* 1 microsecond */
 8000514:	2001      	movs	r0, #1
 8000516:	f7ff ff81 	bl	800041c <STK_voidSetBusyWait>
		GPIO_voidSetPinDirection(STP_SHIFT_CLK, GPIO_HIGH);
 800051a:	2201      	movs	r2, #1
 800051c:	2102      	movs	r1, #2
 800051e:	2000      	movs	r0, #0
 8000520:	f7ff fe78 	bl	8000214 <GPIO_voidSetPinDirection>
		STK_voidSetBusyWait(1); /* 1 microsecond */
 8000524:	2001      	movs	r0, #1
 8000526:	f7ff ff79 	bl	800041c <STK_voidSetBusyWait>
	for(Local_s8Counter=7;Local_s8Counter>=0;Local_s8Counter--)
 800052a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	3b01      	subs	r3, #1
 8000532:	b2db      	uxtb	r3, r3
 8000534:	73fb      	strb	r3, [r7, #15]
 8000536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800053a:	2b00      	cmp	r3, #0
 800053c:	dad6      	bge.n	80004ec <STP_voidSendDataSynchronous+0x10>
	}
	/* pulse on Storage Clock*/
	GPIO_voidSetPinDirection(STP_STARAGE_CLK, GPIO_LOW);
 800053e:	2200      	movs	r2, #0
 8000540:	2101      	movs	r1, #1
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff fe66 	bl	8000214 <GPIO_voidSetPinDirection>
	STK_voidSetBusyWait(1); /* 1 microsecond */
 8000548:	2001      	movs	r0, #1
 800054a:	f7ff ff67 	bl	800041c <STK_voidSetBusyWait>
	GPIO_voidSetPinDirection(STP_STARAGE_CLK, GPIO_HIGH);
 800054e:	2201      	movs	r2, #1
 8000550:	2101      	movs	r1, #1
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff fe5e 	bl	8000214 <GPIO_voidSetPinDirection>
	STK_voidSetBusyWait(1); /* 1 microsecond */
 8000558:	2001      	movs	r0, #1
 800055a:	f7ff ff5f 	bl	800041c <STK_voidSetBusyWait>
}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <main>:




int main(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
	/* Clock Initialisation */
	RCC_InitSysClock();
 800056a:	f7ff fe43 	bl	80001f4 <RCC_InitSysClock>
	RCC_voidEnableClock(RCC_APB2, 2); /* Enable RCC for GPIOA */
 800056e:	2102      	movs	r1, #2
 8000570:	2002      	movs	r0, #2
 8000572:	f7ff fdfd 	bl	8000170 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2, 3);
 8000576:	2103      	movs	r1, #3
 8000578:	2002      	movs	r0, #2
 800057a:	f7ff fdf9 	bl	8000170 <RCC_voidEnableClock>
	/* Pin Directions */
	GPIO_voidSetPinDirection(GPIOA, PIN0, OUTPUT_2MHZ_PUSH_PULL);
 800057e:	2202      	movs	r2, #2
 8000580:	2100      	movs	r1, #0
 8000582:	2000      	movs	r0, #0
 8000584:	f7ff fe46 	bl	8000214 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(GPIOA, PIN1, OUTPUT_2MHZ_PUSH_PULL);
 8000588:	2202      	movs	r2, #2
 800058a:	2101      	movs	r1, #1
 800058c:	2000      	movs	r0, #0
 800058e:	f7ff fe41 	bl	8000214 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(GPIOA, PIN2, OUTPUT_2MHZ_PUSH_PULL);
 8000592:	2202      	movs	r2, #2
 8000594:	2102      	movs	r1, #2
 8000596:	2000      	movs	r0, #0
 8000598:	f7ff fe3c 	bl	8000214 <GPIO_voidSetPinDirection>

	/* Timer Initialisation */
	STK_voidInit();
 800059c:	f7ff ff24 	bl	80003e8 <STK_voidInit>

	/* Test serial to parallel Driver */
	STP_voidSendDataSynchronous(0xAA); //0b10101010
 80005a0:	20aa      	movs	r0, #170	; 0xaa
 80005a2:	f7ff ff9b 	bl	80004dc <STP_voidSendDataSynchronous>

	while(1)
 80005a6:	e7fe      	b.n	80005a6 <main+0x40>

080005a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a8:	480d      	ldr	r0, [pc, #52]	; (80005e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b2:	490d      	ldr	r1, [pc, #52]	; (80005e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b4:	4a0d      	ldr	r2, [pc, #52]	; (80005ec <LoopForever+0xe>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b8:	e002      	b.n	80005c0 <LoopCopyDataInit>

080005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005be:	3304      	adds	r3, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c4:	d3f9      	bcc.n	80005ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c6:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c8:	4c0a      	ldr	r4, [pc, #40]	; (80005f4 <LoopForever+0x16>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005cc:	e001      	b.n	80005d2 <LoopFillZerobss>

080005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d0:	3204      	adds	r2, #4

080005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d4:	d3fb      	bcc.n	80005ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005d6:	f000 f811 	bl	80005fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005da:	f7ff ffc4 	bl	8000566 <main>

080005de <LoopForever>:

LoopForever:
  b LoopForever
 80005de:	e7fe      	b.n	80005de <LoopForever>
  ldr   r0, =_estack
 80005e0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005ec:	08000664 	.word	0x08000664
  ldr r2, =_sbss
 80005f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005f4:	20000034 	.word	0x20000034

080005f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f8:	e7fe      	b.n	80005f8 <ADC1_2_IRQHandler>
	...

080005fc <__libc_init_array>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	2600      	movs	r6, #0
 8000600:	4d0c      	ldr	r5, [pc, #48]	; (8000634 <__libc_init_array+0x38>)
 8000602:	4c0d      	ldr	r4, [pc, #52]	; (8000638 <__libc_init_array+0x3c>)
 8000604:	1b64      	subs	r4, r4, r5
 8000606:	10a4      	asrs	r4, r4, #2
 8000608:	42a6      	cmp	r6, r4
 800060a:	d109      	bne.n	8000620 <__libc_init_array+0x24>
 800060c:	f000 f81a 	bl	8000644 <_init>
 8000610:	2600      	movs	r6, #0
 8000612:	4d0a      	ldr	r5, [pc, #40]	; (800063c <__libc_init_array+0x40>)
 8000614:	4c0a      	ldr	r4, [pc, #40]	; (8000640 <__libc_init_array+0x44>)
 8000616:	1b64      	subs	r4, r4, r5
 8000618:	10a4      	asrs	r4, r4, #2
 800061a:	42a6      	cmp	r6, r4
 800061c:	d105      	bne.n	800062a <__libc_init_array+0x2e>
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f855 3b04 	ldr.w	r3, [r5], #4
 8000624:	4798      	blx	r3
 8000626:	3601      	adds	r6, #1
 8000628:	e7ee      	b.n	8000608 <__libc_init_array+0xc>
 800062a:	f855 3b04 	ldr.w	r3, [r5], #4
 800062e:	4798      	blx	r3
 8000630:	3601      	adds	r6, #1
 8000632:	e7f2      	b.n	800061a <__libc_init_array+0x1e>
 8000634:	0800065c 	.word	0x0800065c
 8000638:	0800065c 	.word	0x0800065c
 800063c:	0800065c 	.word	0x0800065c
 8000640:	08000660 	.word	0x08000660

08000644 <_init>:
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000646:	bf00      	nop
 8000648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064a:	bc08      	pop	{r3}
 800064c:	469e      	mov	lr, r3
 800064e:	4770      	bx	lr

08000650 <_fini>:
 8000650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000652:	bf00      	nop
 8000654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000656:	bc08      	pop	{r3}
 8000658:	469e      	mov	lr, r3
 800065a:	4770      	bx	lr
