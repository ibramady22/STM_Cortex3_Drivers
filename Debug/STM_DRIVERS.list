
STM_DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007a0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008d0  080008d0  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008d0  080008d0  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  080008d0  080008d0  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008d0  080008d0  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008d0  080008d0  000108d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008d4  080008d4  000108d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  080008d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000048  08000920  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000920  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cbf  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000065f  00000000  00000000  00020d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00021390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  00021568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000010ba  00000000  00000000  000216b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000012b7  00000000  00000000  00022772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000455a  00000000  00000000  00023a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00027f83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004fc  00000000  00000000  00027fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000048 	.word	0x20000048
 800014c:	00000000 	.word	0x00000000
 8000150:	080008b8 	.word	0x080008b8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000004c 	.word	0x2000004c
 800016c:	080008b8 	.word	0x080008b8

08000170 <RCC_voidEnableClock>:
#include "RCC_private.h"
#include "RCC_config.h"


void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PerId)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
	/* input validation */
	if(Copy_u8PerId>31) 
 8000180:	79bb      	ldrb	r3, [r7, #6]
 8000182:	2b1f      	cmp	r3, #31
 8000184:	d92b      	bls.n	80001de <RCC_voidEnableClock+0x6e>
	{
		switch (Copy_u8BusId)
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2b02      	cmp	r3, #2
 800018a:	d01c      	beq.n	80001c6 <RCC_voidEnableClock+0x56>
 800018c:	2b02      	cmp	r3, #2
 800018e:	dc25      	bgt.n	80001dc <RCC_voidEnableClock+0x6c>
 8000190:	2b00      	cmp	r3, #0
 8000192:	d002      	beq.n	800019a <RCC_voidEnableClock+0x2a>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d00b      	beq.n	80001b0 <RCC_voidEnableClock+0x40>
		{
			case RCC_AHB  :  SET_BIT(RCC_AHBENR,Copy_u8PerId) ;                                break;
			case RCC_APB1 :  SET_BIT(RCC_APB1ENR,Copy_u8PerId) ;                               break;
			case RCC_APB2 :  SET_BIT(RCC_APB2ENR,Copy_u8PerId) ;                               break;
		    default       :           /*return error */                                        break;
 8000198:	e020      	b.n	80001dc <RCC_voidEnableClock+0x6c>
			case RCC_AHB  :  SET_BIT(RCC_AHBENR,Copy_u8PerId) ;                                break;
 800019a:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <RCC_voidEnableClock+0x78>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	79ba      	ldrb	r2, [r7, #6]
 80001a0:	2101      	movs	r1, #1
 80001a2:	fa01 f202 	lsl.w	r2, r1, r2
 80001a6:	4611      	mov	r1, r2
 80001a8:	4a0f      	ldr	r2, [pc, #60]	; (80001e8 <RCC_voidEnableClock+0x78>)
 80001aa:	430b      	orrs	r3, r1
 80001ac:	6013      	str	r3, [r2, #0]
 80001ae:	e016      	b.n	80001de <RCC_voidEnableClock+0x6e>
			case RCC_APB1 :  SET_BIT(RCC_APB1ENR,Copy_u8PerId) ;                               break;
 80001b0:	4b0e      	ldr	r3, [pc, #56]	; (80001ec <RCC_voidEnableClock+0x7c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	79ba      	ldrb	r2, [r7, #6]
 80001b6:	2101      	movs	r1, #1
 80001b8:	fa01 f202 	lsl.w	r2, r1, r2
 80001bc:	4611      	mov	r1, r2
 80001be:	4a0b      	ldr	r2, [pc, #44]	; (80001ec <RCC_voidEnableClock+0x7c>)
 80001c0:	430b      	orrs	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	e00b      	b.n	80001de <RCC_voidEnableClock+0x6e>
			case RCC_APB2 :  SET_BIT(RCC_APB2ENR,Copy_u8PerId) ;                               break;
 80001c6:	4b0a      	ldr	r3, [pc, #40]	; (80001f0 <RCC_voidEnableClock+0x80>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	79ba      	ldrb	r2, [r7, #6]
 80001cc:	2101      	movs	r1, #1
 80001ce:	fa01 f202 	lsl.w	r2, r1, r2
 80001d2:	4611      	mov	r1, r2
 80001d4:	4a06      	ldr	r2, [pc, #24]	; (80001f0 <RCC_voidEnableClock+0x80>)
 80001d6:	430b      	orrs	r3, r1
 80001d8:	6013      	str	r3, [r2, #0]
 80001da:	e000      	b.n	80001de <RCC_voidEnableClock+0x6e>
		    default       :           /*return error */                                        break;
 80001dc:	bf00      	nop
	}
	else
	{
		/*return error */
	}
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	40021014 	.word	0x40021014
 80001ec:	4002101c 	.word	0x4002101c
 80001f0:	40021018 	.word	0x40021018

080001f4 <RCC_InitSysClock>:
	}
}


void RCC_InitSysClock(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
	#elif   RCC_CLOCK_TYPE == RCC_HSE_RC 
	    RCC_CR = 0x00050000;    /* enable HSE with  bypass */
		/*suppose AHB==Source  APB1==APB2==AHB   no_prescaller*/
		RCC_CFGR = 0x00000001;  /* make HSE the source clock */
	#elif   RCC_CLOCK_TYPE == RCC_HSI  
	    RCC_CR = 0x00000081;    /* enable HSI + trimming =0 */
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <RCC_InitSysClock+0x18>)
 80001fa:	2281      	movs	r2, #129	; 0x81
 80001fc:	601a      	str	r2, [r3, #0]
		/*suppose AHB==Source  APB1==APB2==AHB   no_prescaller*/
		RCC_CFGR = 0x00000000;  /* make HSI the source clock */
 80001fe:	4b04      	ldr	r3, [pc, #16]	; (8000210 <RCC_InitSysClock+0x1c>)
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
//        #endif
//
    #else   
            #error("you choiced wrong clock")
    #endif		
}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40021000 	.word	0x40021000
 8000210:	40021004 	.word	0x40021004

08000214 <GPIO_voidSetPinDirection>:
#include "GPIO_config.h"



void GPIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Mode)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
 800021e:	460b      	mov	r3, r1
 8000220:	71bb      	strb	r3, [r7, #6]
 8000222:	4613      	mov	r3, r2
 8000224:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8PortID)
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	2b02      	cmp	r3, #2
 800022a:	d07a      	beq.n	8000322 <GPIO_voidSetPinDirection+0x10e>
 800022c:	2b02      	cmp	r3, #2
 800022e:	f300 80b1 	bgt.w	8000394 <GPIO_voidSetPinDirection+0x180>
 8000232:	2b00      	cmp	r3, #0
 8000234:	d002      	beq.n	800023c <GPIO_voidSetPinDirection+0x28>
 8000236:	2b01      	cmp	r3, #1
 8000238:	d03a      	beq.n	80002b0 <GPIO_voidSetPinDirection+0x9c>
			/* Return Error */
		}
	break;
	default:
		/* Return Error*/
	break;
 800023a:	e0ab      	b.n	8000394 <GPIO_voidSetPinDirection+0x180>
		if(Copy_u8PinID <= 7)
 800023c:	79bb      	ldrb	r3, [r7, #6]
 800023e:	2b07      	cmp	r3, #7
 8000240:	d817      	bhi.n	8000272 <GPIO_voidSetPinDirection+0x5e>
			GPIOA_CRL &= ~ ((0b1111)<< (Copy_u8PinID*4));  /* Reset Register*/
 8000242:	4b5a      	ldr	r3, [pc, #360]	; (80003ac <GPIO_voidSetPinDirection+0x198>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	79ba      	ldrb	r2, [r7, #6]
 8000248:	0092      	lsls	r2, r2, #2
 800024a:	210f      	movs	r1, #15
 800024c:	fa01 f202 	lsl.w	r2, r1, r2
 8000250:	43d2      	mvns	r2, r2
 8000252:	4611      	mov	r1, r2
 8000254:	4a55      	ldr	r2, [pc, #340]	; (80003ac <GPIO_voidSetPinDirection+0x198>)
 8000256:	400b      	ands	r3, r1
 8000258:	6013      	str	r3, [r2, #0]
			GPIOA_CRL |=   ((Copy_u8Mode)<< (Copy_u8PinID*4)); /*set Mode */
 800025a:	4b54      	ldr	r3, [pc, #336]	; (80003ac <GPIO_voidSetPinDirection+0x198>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	7979      	ldrb	r1, [r7, #5]
 8000260:	79ba      	ldrb	r2, [r7, #6]
 8000262:	0092      	lsls	r2, r2, #2
 8000264:	fa01 f202 	lsl.w	r2, r1, r2
 8000268:	4611      	mov	r1, r2
 800026a:	4a50      	ldr	r2, [pc, #320]	; (80003ac <GPIO_voidSetPinDirection+0x198>)
 800026c:	430b      	orrs	r3, r1
 800026e:	6013      	str	r3, [r2, #0]
	break;
 8000270:	e092      	b.n	8000398 <GPIO_voidSetPinDirection+0x184>
		else if (Copy_u8PinID <= 15)
 8000272:	79bb      	ldrb	r3, [r7, #6]
 8000274:	2b0f      	cmp	r3, #15
 8000276:	f200 808f 	bhi.w	8000398 <GPIO_voidSetPinDirection+0x184>
			Copy_u8PinID -=8; /*Mapping*/
 800027a:	79bb      	ldrb	r3, [r7, #6]
 800027c:	3b08      	subs	r3, #8
 800027e:	71bb      	strb	r3, [r7, #6]
			GPIOA_CRH &= ~ ((0b1111)<< (Copy_u8PinID*4));  /* Reset Register*/
 8000280:	4b4b      	ldr	r3, [pc, #300]	; (80003b0 <GPIO_voidSetPinDirection+0x19c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	79ba      	ldrb	r2, [r7, #6]
 8000286:	0092      	lsls	r2, r2, #2
 8000288:	210f      	movs	r1, #15
 800028a:	fa01 f202 	lsl.w	r2, r1, r2
 800028e:	43d2      	mvns	r2, r2
 8000290:	4611      	mov	r1, r2
 8000292:	4a47      	ldr	r2, [pc, #284]	; (80003b0 <GPIO_voidSetPinDirection+0x19c>)
 8000294:	400b      	ands	r3, r1
 8000296:	6013      	str	r3, [r2, #0]
			GPIOA_CRH |=   ((Copy_u8Mode)<< (Copy_u8PinID*4)); /*set Mode */
 8000298:	4b45      	ldr	r3, [pc, #276]	; (80003b0 <GPIO_voidSetPinDirection+0x19c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	7979      	ldrb	r1, [r7, #5]
 800029e:	79ba      	ldrb	r2, [r7, #6]
 80002a0:	0092      	lsls	r2, r2, #2
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	4611      	mov	r1, r2
 80002a8:	4a41      	ldr	r2, [pc, #260]	; (80003b0 <GPIO_voidSetPinDirection+0x19c>)
 80002aa:	430b      	orrs	r3, r1
 80002ac:	6013      	str	r3, [r2, #0]
	break;
 80002ae:	e073      	b.n	8000398 <GPIO_voidSetPinDirection+0x184>
		if(Copy_u8PinID <= 7)
 80002b0:	79bb      	ldrb	r3, [r7, #6]
 80002b2:	2b07      	cmp	r3, #7
 80002b4:	d817      	bhi.n	80002e6 <GPIO_voidSetPinDirection+0xd2>
			GPIOB_CRL &= ~ ((0b1111)<< (Copy_u8PinID*4));  /* Reset Register*/
 80002b6:	4b3f      	ldr	r3, [pc, #252]	; (80003b4 <GPIO_voidSetPinDirection+0x1a0>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	79ba      	ldrb	r2, [r7, #6]
 80002bc:	0092      	lsls	r2, r2, #2
 80002be:	210f      	movs	r1, #15
 80002c0:	fa01 f202 	lsl.w	r2, r1, r2
 80002c4:	43d2      	mvns	r2, r2
 80002c6:	4611      	mov	r1, r2
 80002c8:	4a3a      	ldr	r2, [pc, #232]	; (80003b4 <GPIO_voidSetPinDirection+0x1a0>)
 80002ca:	400b      	ands	r3, r1
 80002cc:	6013      	str	r3, [r2, #0]
			GPIOB_CRL |=   ((Copy_u8Mode)<< (Copy_u8PinID*4)); /*set Mode */
 80002ce:	4b39      	ldr	r3, [pc, #228]	; (80003b4 <GPIO_voidSetPinDirection+0x1a0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	7979      	ldrb	r1, [r7, #5]
 80002d4:	79ba      	ldrb	r2, [r7, #6]
 80002d6:	0092      	lsls	r2, r2, #2
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	4611      	mov	r1, r2
 80002de:	4a35      	ldr	r2, [pc, #212]	; (80003b4 <GPIO_voidSetPinDirection+0x1a0>)
 80002e0:	430b      	orrs	r3, r1
 80002e2:	6013      	str	r3, [r2, #0]
	break;
 80002e4:	e05a      	b.n	800039c <GPIO_voidSetPinDirection+0x188>
		else if (Copy_u8PinID <= 15)
 80002e6:	79bb      	ldrb	r3, [r7, #6]
 80002e8:	2b0f      	cmp	r3, #15
 80002ea:	d857      	bhi.n	800039c <GPIO_voidSetPinDirection+0x188>
			Copy_u8PinID -=8; /*Mapping*/
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	3b08      	subs	r3, #8
 80002f0:	71bb      	strb	r3, [r7, #6]
			GPIOB_CRH &= ~ ((0b1111)<< (Copy_u8PinID*4));  /* Reset Register*/
 80002f2:	4b31      	ldr	r3, [pc, #196]	; (80003b8 <GPIO_voidSetPinDirection+0x1a4>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	79ba      	ldrb	r2, [r7, #6]
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	210f      	movs	r1, #15
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	43d2      	mvns	r2, r2
 8000302:	4611      	mov	r1, r2
 8000304:	4a2c      	ldr	r2, [pc, #176]	; (80003b8 <GPIO_voidSetPinDirection+0x1a4>)
 8000306:	400b      	ands	r3, r1
 8000308:	6013      	str	r3, [r2, #0]
			GPIOB_CRH |=   ((Copy_u8Mode)<< (Copy_u8PinID*4)); /*set Mode */
 800030a:	4b2b      	ldr	r3, [pc, #172]	; (80003b8 <GPIO_voidSetPinDirection+0x1a4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	7979      	ldrb	r1, [r7, #5]
 8000310:	79ba      	ldrb	r2, [r7, #6]
 8000312:	0092      	lsls	r2, r2, #2
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	4611      	mov	r1, r2
 800031a:	4a27      	ldr	r2, [pc, #156]	; (80003b8 <GPIO_voidSetPinDirection+0x1a4>)
 800031c:	430b      	orrs	r3, r1
 800031e:	6013      	str	r3, [r2, #0]
	break;
 8000320:	e03c      	b.n	800039c <GPIO_voidSetPinDirection+0x188>
		if(Copy_u8PinID <= 7)
 8000322:	79bb      	ldrb	r3, [r7, #6]
 8000324:	2b07      	cmp	r3, #7
 8000326:	d817      	bhi.n	8000358 <GPIO_voidSetPinDirection+0x144>
			GPIOC_CRL &= ~ ((0b1111)<< (Copy_u8PinID*4));  /* Reset Register*/
 8000328:	4b24      	ldr	r3, [pc, #144]	; (80003bc <GPIO_voidSetPinDirection+0x1a8>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	79ba      	ldrb	r2, [r7, #6]
 800032e:	0092      	lsls	r2, r2, #2
 8000330:	210f      	movs	r1, #15
 8000332:	fa01 f202 	lsl.w	r2, r1, r2
 8000336:	43d2      	mvns	r2, r2
 8000338:	4611      	mov	r1, r2
 800033a:	4a20      	ldr	r2, [pc, #128]	; (80003bc <GPIO_voidSetPinDirection+0x1a8>)
 800033c:	400b      	ands	r3, r1
 800033e:	6013      	str	r3, [r2, #0]
			GPIOC_CRL |=   ((Copy_u8Mode)<< (Copy_u8PinID*4)); /*set Mode */
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <GPIO_voidSetPinDirection+0x1a8>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	7979      	ldrb	r1, [r7, #5]
 8000346:	79ba      	ldrb	r2, [r7, #6]
 8000348:	0092      	lsls	r2, r2, #2
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	4611      	mov	r1, r2
 8000350:	4a1a      	ldr	r2, [pc, #104]	; (80003bc <GPIO_voidSetPinDirection+0x1a8>)
 8000352:	430b      	orrs	r3, r1
 8000354:	6013      	str	r3, [r2, #0]
	break;
 8000356:	e023      	b.n	80003a0 <GPIO_voidSetPinDirection+0x18c>
		else if (Copy_u8PinID <= 15)
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	2b0f      	cmp	r3, #15
 800035c:	d820      	bhi.n	80003a0 <GPIO_voidSetPinDirection+0x18c>
			Copy_u8PinID -=8; /*Mapping*/
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	3b08      	subs	r3, #8
 8000362:	71bb      	strb	r3, [r7, #6]
			GPIOC_CRH &= ~ ((0b1111)<< (Copy_u8PinID*4));  /* Reset Register*/
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <GPIO_voidSetPinDirection+0x1ac>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	79ba      	ldrb	r2, [r7, #6]
 800036a:	0092      	lsls	r2, r2, #2
 800036c:	210f      	movs	r1, #15
 800036e:	fa01 f202 	lsl.w	r2, r1, r2
 8000372:	43d2      	mvns	r2, r2
 8000374:	4611      	mov	r1, r2
 8000376:	4a12      	ldr	r2, [pc, #72]	; (80003c0 <GPIO_voidSetPinDirection+0x1ac>)
 8000378:	400b      	ands	r3, r1
 800037a:	6013      	str	r3, [r2, #0]
			GPIOC_CRH |=   ((Copy_u8Mode)<< (Copy_u8PinID*4)); /*set Mode */
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <GPIO_voidSetPinDirection+0x1ac>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	7979      	ldrb	r1, [r7, #5]
 8000382:	79ba      	ldrb	r2, [r7, #6]
 8000384:	0092      	lsls	r2, r2, #2
 8000386:	fa01 f202 	lsl.w	r2, r1, r2
 800038a:	4611      	mov	r1, r2
 800038c:	4a0c      	ldr	r2, [pc, #48]	; (80003c0 <GPIO_voidSetPinDirection+0x1ac>)
 800038e:	430b      	orrs	r3, r1
 8000390:	6013      	str	r3, [r2, #0]
	break;
 8000392:	e005      	b.n	80003a0 <GPIO_voidSetPinDirection+0x18c>
	break;
 8000394:	bf00      	nop
 8000396:	e004      	b.n	80003a2 <GPIO_voidSetPinDirection+0x18e>
	break;
 8000398:	bf00      	nop
 800039a:	e002      	b.n	80003a2 <GPIO_voidSetPinDirection+0x18e>
	break;
 800039c:	bf00      	nop
 800039e:	e000      	b.n	80003a2 <GPIO_voidSetPinDirection+0x18e>
	break;
 80003a0:	bf00      	nop
	}
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40010800 	.word	0x40010800
 80003b0:	40010804 	.word	0x40010804
 80003b4:	40010c00 	.word	0x40010c00
 80003b8:	40010c04 	.word	0x40010c04
 80003bc:	40011000 	.word	0x40011000
 80003c0:	40011004 	.word	0x40011004

080003c4 <GPIO_voidSetPinVal>:

void GPIO_voidSetPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Val)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
 80003ce:	460b      	mov	r3, r1
 80003d0:	71bb      	strb	r3, [r7, #6]
 80003d2:	4613      	mov	r3, r2
 80003d4:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8PortID)
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d040      	beq.n	800045e <GPIO_voidSetPinVal+0x9a>
 80003dc:	2b02      	cmp	r3, #2
 80003de:	dc5b      	bgt.n	8000498 <GPIO_voidSetPinVal+0xd4>
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d002      	beq.n	80003ea <GPIO_voidSetPinVal+0x26>
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d01d      	beq.n	8000424 <GPIO_voidSetPinVal+0x60>
			{
				/* Return Error */
			}
	        break;
		default: /* Return Error */
			break;
 80003e8:	e056      	b.n	8000498 <GPIO_voidSetPinVal+0xd4>
			if(Copy_u8Val == GPIO_LOW )
 80003ea:	797b      	ldrb	r3, [r7, #5]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d10b      	bne.n	8000408 <GPIO_voidSetPinVal+0x44>
				CLR_BIT(GPIOA_ODR,Copy_u8PinID); /*each Pin has 1 bit*/
 80003f0:	4b2f      	ldr	r3, [pc, #188]	; (80004b0 <GPIO_voidSetPinVal+0xec>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	79ba      	ldrb	r2, [r7, #6]
 80003f6:	2101      	movs	r1, #1
 80003f8:	fa01 f202 	lsl.w	r2, r1, r2
 80003fc:	43d2      	mvns	r2, r2
 80003fe:	4611      	mov	r1, r2
 8000400:	4a2b      	ldr	r2, [pc, #172]	; (80004b0 <GPIO_voidSetPinVal+0xec>)
 8000402:	400b      	ands	r3, r1
 8000404:	6013      	str	r3, [r2, #0]
	        break;
 8000406:	e049      	b.n	800049c <GPIO_voidSetPinVal+0xd8>
			else if (Copy_u8Val == GPIO_HIGH)
 8000408:	797b      	ldrb	r3, [r7, #5]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d146      	bne.n	800049c <GPIO_voidSetPinVal+0xd8>
				SET_BIT(GPIOA_ODR,Copy_u8PinID);
 800040e:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <GPIO_voidSetPinVal+0xec>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	79ba      	ldrb	r2, [r7, #6]
 8000414:	2101      	movs	r1, #1
 8000416:	fa01 f202 	lsl.w	r2, r1, r2
 800041a:	4611      	mov	r1, r2
 800041c:	4a24      	ldr	r2, [pc, #144]	; (80004b0 <GPIO_voidSetPinVal+0xec>)
 800041e:	430b      	orrs	r3, r1
 8000420:	6013      	str	r3, [r2, #0]
	        break;
 8000422:	e03b      	b.n	800049c <GPIO_voidSetPinVal+0xd8>
			if(Copy_u8Val == GPIO_LOW )
 8000424:	797b      	ldrb	r3, [r7, #5]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d10b      	bne.n	8000442 <GPIO_voidSetPinVal+0x7e>
				CLR_BIT(GPIOB_ODR,Copy_u8PinID);
 800042a:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <GPIO_voidSetPinVal+0xf0>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	79ba      	ldrb	r2, [r7, #6]
 8000430:	2101      	movs	r1, #1
 8000432:	fa01 f202 	lsl.w	r2, r1, r2
 8000436:	43d2      	mvns	r2, r2
 8000438:	4611      	mov	r1, r2
 800043a:	4a1e      	ldr	r2, [pc, #120]	; (80004b4 <GPIO_voidSetPinVal+0xf0>)
 800043c:	400b      	ands	r3, r1
 800043e:	6013      	str	r3, [r2, #0]
	        break;
 8000440:	e02e      	b.n	80004a0 <GPIO_voidSetPinVal+0xdc>
			else if (Copy_u8Val == GPIO_HIGH)
 8000442:	797b      	ldrb	r3, [r7, #5]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d12b      	bne.n	80004a0 <GPIO_voidSetPinVal+0xdc>
				SET_BIT(GPIOB_ODR,Copy_u8PinID);
 8000448:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <GPIO_voidSetPinVal+0xf0>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	79ba      	ldrb	r2, [r7, #6]
 800044e:	2101      	movs	r1, #1
 8000450:	fa01 f202 	lsl.w	r2, r1, r2
 8000454:	4611      	mov	r1, r2
 8000456:	4a17      	ldr	r2, [pc, #92]	; (80004b4 <GPIO_voidSetPinVal+0xf0>)
 8000458:	430b      	orrs	r3, r1
 800045a:	6013      	str	r3, [r2, #0]
	        break;
 800045c:	e020      	b.n	80004a0 <GPIO_voidSetPinVal+0xdc>
			if(Copy_u8Val == GPIO_LOW )
 800045e:	797b      	ldrb	r3, [r7, #5]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d10b      	bne.n	800047c <GPIO_voidSetPinVal+0xb8>
				CLR_BIT(GPIOC_ODR,Copy_u8PinID);
 8000464:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <GPIO_voidSetPinVal+0xf4>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	79ba      	ldrb	r2, [r7, #6]
 800046a:	2101      	movs	r1, #1
 800046c:	fa01 f202 	lsl.w	r2, r1, r2
 8000470:	43d2      	mvns	r2, r2
 8000472:	4611      	mov	r1, r2
 8000474:	4a10      	ldr	r2, [pc, #64]	; (80004b8 <GPIO_voidSetPinVal+0xf4>)
 8000476:	400b      	ands	r3, r1
 8000478:	6013      	str	r3, [r2, #0]
	        break;
 800047a:	e013      	b.n	80004a4 <GPIO_voidSetPinVal+0xe0>
			else if (Copy_u8Val == GPIO_HIGH)
 800047c:	797b      	ldrb	r3, [r7, #5]
 800047e:	2b01      	cmp	r3, #1
 8000480:	d110      	bne.n	80004a4 <GPIO_voidSetPinVal+0xe0>
				SET_BIT(GPIOC_ODR,Copy_u8PinID);
 8000482:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <GPIO_voidSetPinVal+0xf4>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	79ba      	ldrb	r2, [r7, #6]
 8000488:	2101      	movs	r1, #1
 800048a:	fa01 f202 	lsl.w	r2, r1, r2
 800048e:	4611      	mov	r1, r2
 8000490:	4a09      	ldr	r2, [pc, #36]	; (80004b8 <GPIO_voidSetPinVal+0xf4>)
 8000492:	430b      	orrs	r3, r1
 8000494:	6013      	str	r3, [r2, #0]
	        break;
 8000496:	e005      	b.n	80004a4 <GPIO_voidSetPinVal+0xe0>
			break;
 8000498:	bf00      	nop
 800049a:	e004      	b.n	80004a6 <GPIO_voidSetPinVal+0xe2>
	        break;
 800049c:	bf00      	nop
 800049e:	e002      	b.n	80004a6 <GPIO_voidSetPinVal+0xe2>
	        break;
 80004a0:	bf00      	nop
 80004a2:	e000      	b.n	80004a6 <GPIO_voidSetPinVal+0xe2>
	        break;
 80004a4:	bf00      	nop
		}
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	4001080c 	.word	0x4001080c
 80004b4:	40010c0c 	.word	0x40010c0c
 80004b8:	4001100c 	.word	0x4001100c

080004bc <NVIC_voidEnableInterrupt>:




void NVIC_voidEnableInterrupt(u8 Copy_u8IntNumber)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
	// in this register 1 do change, 0 has no effect
	if(Copy_u8IntNumber<=31)
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b1f      	cmp	r3, #31
 80004ca:	d805      	bhi.n	80004d8 <NVIC_voidEnableInterrupt+0x1c>
	{
		NVIC_ISER0=1<<Copy_u8IntNumber;
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	2201      	movs	r2, #1
 80004d0:	409a      	lsls	r2, r3
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <NVIC_voidEnableInterrupt+0x3c>)
 80004d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* return Error */
	}
}
 80004d6:	e00a      	b.n	80004ee <NVIC_voidEnableInterrupt+0x32>
	else if (Copy_u8IntNumber<=59)
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	2b3b      	cmp	r3, #59	; 0x3b
 80004dc:	d807      	bhi.n	80004ee <NVIC_voidEnableInterrupt+0x32>
		Copy_u8IntNumber -=32;
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	3b20      	subs	r3, #32
 80004e2:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1=1<<Copy_u8IntNumber;
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	2201      	movs	r2, #1
 80004e8:	409a      	lsls	r2, r3
 80004ea:	4b04      	ldr	r3, [pc, #16]	; (80004fc <NVIC_voidEnableInterrupt+0x40>)
 80004ec:	601a      	str	r2, [r3, #0]
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	e000e100 	.word	0xe000e100
 80004fc:	e000e104 	.word	0xe000e104

08000500 <EXTI0_IRQHandler>:

	EXTI0_CallBack = ptr;

}
void EXTI0_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

	EXTI0_CallBack();
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <EXTI0_IRQHandler+0x1c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4798      	blx	r3
	SET_BIT( EXIN->PR , 0 ); //flag
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <EXTI0_IRQHandler+0x20>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a04      	ldr	r2, [pc, #16]	; (8000520 <EXTI0_IRQHandler+0x20>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6153      	str	r3, [r2, #20]

}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000064 	.word	0x20000064
 8000520:	40010400 	.word	0x40010400

08000524 <SysTick_Handler>:
}


/* STK Handler*/
void SysTick_Handler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	if(single_interval==1)
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <SysTick_Handler+0x28>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d108      	bne.n	8000542 <SysTick_Handler+0x1e>
	{
		single_interval=0;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <SysTick_Handler+0x28>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
		STK->LOAD=0;
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <SysTick_Handler+0x2c>)
 8000538:	2200      	movs	r2, #0
 800053a:	605a      	str	r2, [r3, #4]
		STK->VAL=0;
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <SysTick_Handler+0x2c>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
	}
	STK_CALLBACK();
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <SysTick_Handler+0x30>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4798      	blx	r3
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	2000006c 	.word	0x2000006c
 8000550:	e000e010 	.word	0xe000e010
 8000554:	20000068 	.word	0x20000068

08000558 <LED_voidOn>:
#include "../../03-HAL/01-LED/LED_interface.h"
#include "../../03-HAL/01-LED/LED_private.h"


void LED_voidOn(u8 Copy_u8LedNum)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	switch(Copy_u8LedNum)
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	3b01      	subs	r3, #1
 8000566:	2b05      	cmp	r3, #5
 8000568:	d850      	bhi.n	800060c <LED_voidOn+0xb4>
 800056a:	a201      	add	r2, pc, #4	; (adr r2, 8000570 <LED_voidOn+0x18>)
 800056c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000570:	08000589 	.word	0x08000589
 8000574:	0800059f 	.word	0x0800059f
 8000578:	080005b5 	.word	0x080005b5
 800057c:	080005cb 	.word	0x080005cb
 8000580:	080005e1 	.word	0x080005e1
 8000584:	080005f7 	.word	0x080005f7
	{
	case LED_1:
		GPIO_voidSetPinDirection(LED_1_PORT, LED_1_PIN, OUTPUT_2MHZ_PUSH_PULL);
 8000588:	2202      	movs	r2, #2
 800058a:	2107      	movs	r1, #7
 800058c:	2002      	movs	r0, #2
 800058e:	f7ff fe41 	bl	8000214 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinVal(LED_1_PORT, LED_1_PIN, GPIO_HIGH);
 8000592:	2201      	movs	r2, #1
 8000594:	2107      	movs	r1, #7
 8000596:	2002      	movs	r0, #2
 8000598:	f7ff ff14 	bl	80003c4 <GPIO_voidSetPinVal>
		break;
 800059c:	e037      	b.n	800060e <LED_voidOn+0xb6>
	case LED_2:
		GPIO_voidSetPinDirection(LED_2_PORT, LED_2_PIN, OUTPUT_2MHZ_PUSH_PULL);
 800059e:	2202      	movs	r2, #2
 80005a0:	2109      	movs	r1, #9
 80005a2:	2000      	movs	r0, #0
 80005a4:	f7ff fe36 	bl	8000214 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinVal(LED_2_PORT, LED_2_PIN, GPIO_HIGH);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2109      	movs	r1, #9
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff ff09 	bl	80003c4 <GPIO_voidSetPinVal>
		break;
 80005b2:	e02c      	b.n	800060e <LED_voidOn+0xb6>
	case LED_3:
		GPIO_voidSetPinDirection(LED_3_PORT, LED_3_PIN, OUTPUT_2MHZ_PUSH_PULL);
 80005b4:	2202      	movs	r2, #2
 80005b6:	2101      	movs	r1, #1
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff fe2b 	bl	8000214 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinVal(LED_3_PORT, LED_3_PIN, GPIO_HIGH);
 80005be:	2201      	movs	r2, #1
 80005c0:	2101      	movs	r1, #1
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff fefe 	bl	80003c4 <GPIO_voidSetPinVal>
		break;
 80005c8:	e021      	b.n	800060e <LED_voidOn+0xb6>
	case LED_4:
		GPIO_voidSetPinDirection(LED_4_PORT, LED_4_PIN, OUTPUT_2MHZ_PUSH_PULL);
 80005ca:	2202      	movs	r2, #2
 80005cc:	2103      	movs	r1, #3
 80005ce:	2001      	movs	r0, #1
 80005d0:	f7ff fe20 	bl	8000214 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinVal(LED_4_PORT, LED_4_PIN, GPIO_HIGH);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2103      	movs	r1, #3
 80005d8:	2001      	movs	r0, #1
 80005da:	f7ff fef3 	bl	80003c4 <GPIO_voidSetPinVal>
		break;
 80005de:	e016      	b.n	800060e <LED_voidOn+0xb6>
	case LED_5:
		GPIO_voidSetPinDirection(LED_5_PORT, LED_5_PIN, OUTPUT_2MHZ_PUSH_PULL);
 80005e0:	2202      	movs	r2, #2
 80005e2:	2104      	movs	r1, #4
 80005e4:	2000      	movs	r0, #0
 80005e6:	f7ff fe15 	bl	8000214 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinVal(LED_5_PORT, LED_5_PIN, GPIO_HIGH);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2104      	movs	r1, #4
 80005ee:	2000      	movs	r0, #0
 80005f0:	f7ff fee8 	bl	80003c4 <GPIO_voidSetPinVal>
		break;
 80005f4:	e00b      	b.n	800060e <LED_voidOn+0xb6>
	case LED_6:
		GPIO_voidSetPinDirection(LED_6_PORT, LED_6_PIN, OUTPUT_2MHZ_PUSH_PULL);
 80005f6:	2202      	movs	r2, #2
 80005f8:	2108      	movs	r1, #8
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff fe0a 	bl	8000214 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinVal(LED_6_PORT, LED_6_PIN, GPIO_HIGH);
 8000600:	2201      	movs	r2, #1
 8000602:	2108      	movs	r1, #8
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff fedd 	bl	80003c4 <GPIO_voidSetPinVal>
		break;
 800060a:	e000      	b.n	800060e <LED_voidOn+0xb6>
	default:
		/*   Return Error */
		break;
 800060c:	bf00      	nop

	}
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop

08000618 <SEV_SEGMENT_voidDisplay>:




 void SEV_SEGMENT_voidDisplay(u8 Copy_u8Num)
 {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	 if(Copy_u8Num> 9 )
	 {
		 /* Return error */
	 }
	 /*set all pins output */
	 GPIO_voidSetPinDirection(A_PORT, A_PIN, OUTPUT_2MHZ_PUSH_PULL);
 8000622:	2202      	movs	r2, #2
 8000624:	2100      	movs	r1, #0
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff fdf4 	bl	8000214 <GPIO_voidSetPinDirection>
	 GPIO_voidSetPinDirection(B_PORT, B_PIN, OUTPUT_2MHZ_PUSH_PULL);
 800062c:	2202      	movs	r2, #2
 800062e:	2101      	movs	r1, #1
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff fdef 	bl	8000214 <GPIO_voidSetPinDirection>
	 GPIO_voidSetPinDirection(C_PORT, C_PIN, OUTPUT_2MHZ_PUSH_PULL);
 8000636:	2202      	movs	r2, #2
 8000638:	2102      	movs	r1, #2
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff fdea 	bl	8000214 <GPIO_voidSetPinDirection>
	 GPIO_voidSetPinDirection(D_PORT, D_PIN, OUTPUT_2MHZ_PUSH_PULL);
 8000640:	2202      	movs	r2, #2
 8000642:	2103      	movs	r1, #3
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff fde5 	bl	8000214 <GPIO_voidSetPinDirection>
	 GPIO_voidSetPinDirection(E_PORT, E_PIN, OUTPUT_2MHZ_PUSH_PULL);
 800064a:	2202      	movs	r2, #2
 800064c:	2104      	movs	r1, #4
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff fde0 	bl	8000214 <GPIO_voidSetPinDirection>
	 GPIO_voidSetPinDirection(F_PORT, F_PIN, OUTPUT_2MHZ_PUSH_PULL);
 8000654:	2202      	movs	r2, #2
 8000656:	2105      	movs	r1, #5
 8000658:	2000      	movs	r0, #0
 800065a:	f7ff fddb 	bl	8000214 <GPIO_voidSetPinDirection>
	 GPIO_voidSetPinDirection(G_PORT, G_PIN, OUTPUT_2MHZ_PUSH_PULL);
 800065e:	2202      	movs	r2, #2
 8000660:	2106      	movs	r1, #6
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff fdd6 	bl	8000214 <GPIO_voidSetPinDirection>
		 GPIO_voidSetPinVal(G_PORT, G_PIN, S_Table[Copy_u8Num][6]);
	 }
	 else
	 {
		 /* set num on 7-segment*/
		 GPIO_voidSetPinVal(A_PORT, A_PIN, !S_Table[Copy_u8Num][0]);
 8000668:	79fa      	ldrb	r2, [r7, #7]
 800066a:	4940      	ldr	r1, [pc, #256]	; (800076c <SEV_SEGMENT_voidDisplay+0x154>)
 800066c:	4613      	mov	r3, r2
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	440b      	add	r3, r1
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	bf0c      	ite	eq
 800067a:	2301      	moveq	r3, #1
 800067c:	2300      	movne	r3, #0
 800067e:	b2db      	uxtb	r3, r3
 8000680:	461a      	mov	r2, r3
 8000682:	2100      	movs	r1, #0
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff fe9d 	bl	80003c4 <GPIO_voidSetPinVal>
		 GPIO_voidSetPinVal(B_PORT, B_PIN, !S_Table[Copy_u8Num][1]);
 800068a:	79fa      	ldrb	r2, [r7, #7]
 800068c:	4937      	ldr	r1, [pc, #220]	; (800076c <SEV_SEGMENT_voidDisplay+0x154>)
 800068e:	4613      	mov	r3, r2
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	1a9b      	subs	r3, r3, r2
 8000694:	440b      	add	r3, r1
 8000696:	3301      	adds	r3, #1
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	bf0c      	ite	eq
 800069e:	2301      	moveq	r3, #1
 80006a0:	2300      	movne	r3, #0
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	2101      	movs	r1, #1
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff fe8b 	bl	80003c4 <GPIO_voidSetPinVal>
		 GPIO_voidSetPinVal(C_PORT, C_PIN, !S_Table[Copy_u8Num][2]);
 80006ae:	79fa      	ldrb	r2, [r7, #7]
 80006b0:	492e      	ldr	r1, [pc, #184]	; (800076c <SEV_SEGMENT_voidDisplay+0x154>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	1a9b      	subs	r3, r3, r2
 80006b8:	440b      	add	r3, r1
 80006ba:	3302      	adds	r3, #2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	bf0c      	ite	eq
 80006c2:	2301      	moveq	r3, #1
 80006c4:	2300      	movne	r3, #0
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	2102      	movs	r1, #2
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff fe79 	bl	80003c4 <GPIO_voidSetPinVal>
		 GPIO_voidSetPinVal(D_PORT, D_PIN, !S_Table[Copy_u8Num][3]);
 80006d2:	79fa      	ldrb	r2, [r7, #7]
 80006d4:	4925      	ldr	r1, [pc, #148]	; (800076c <SEV_SEGMENT_voidDisplay+0x154>)
 80006d6:	4613      	mov	r3, r2
 80006d8:	00db      	lsls	r3, r3, #3
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	440b      	add	r3, r1
 80006de:	3303      	adds	r3, #3
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	bf0c      	ite	eq
 80006e6:	2301      	moveq	r3, #1
 80006e8:	2300      	movne	r3, #0
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	461a      	mov	r2, r3
 80006ee:	2103      	movs	r1, #3
 80006f0:	2000      	movs	r0, #0
 80006f2:	f7ff fe67 	bl	80003c4 <GPIO_voidSetPinVal>
		 GPIO_voidSetPinVal(E_PORT, E_PIN, !S_Table[Copy_u8Num][4]);
 80006f6:	79fa      	ldrb	r2, [r7, #7]
 80006f8:	491c      	ldr	r1, [pc, #112]	; (800076c <SEV_SEGMENT_voidDisplay+0x154>)
 80006fa:	4613      	mov	r3, r2
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	1a9b      	subs	r3, r3, r2
 8000700:	440b      	add	r3, r1
 8000702:	3304      	adds	r3, #4
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf0c      	ite	eq
 800070a:	2301      	moveq	r3, #1
 800070c:	2300      	movne	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	2104      	movs	r1, #4
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff fe55 	bl	80003c4 <GPIO_voidSetPinVal>
		 GPIO_voidSetPinVal(F_PORT, F_PIN, !S_Table[Copy_u8Num][5]);
 800071a:	79fa      	ldrb	r2, [r7, #7]
 800071c:	4913      	ldr	r1, [pc, #76]	; (800076c <SEV_SEGMENT_voidDisplay+0x154>)
 800071e:	4613      	mov	r3, r2
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	1a9b      	subs	r3, r3, r2
 8000724:	440b      	add	r3, r1
 8000726:	3305      	adds	r3, #5
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	bf0c      	ite	eq
 800072e:	2301      	moveq	r3, #1
 8000730:	2300      	movne	r3, #0
 8000732:	b2db      	uxtb	r3, r3
 8000734:	461a      	mov	r2, r3
 8000736:	2105      	movs	r1, #5
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff fe43 	bl	80003c4 <GPIO_voidSetPinVal>
		 GPIO_voidSetPinVal(G_PORT, G_PIN, !S_Table[Copy_u8Num][6]);
 800073e:	79fa      	ldrb	r2, [r7, #7]
 8000740:	490a      	ldr	r1, [pc, #40]	; (800076c <SEV_SEGMENT_voidDisplay+0x154>)
 8000742:	4613      	mov	r3, r2
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	440b      	add	r3, r1
 800074a:	3306      	adds	r3, #6
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
 8000758:	461a      	mov	r2, r3
 800075a:	2106      	movs	r1, #6
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff fe31 	bl	80003c4 <GPIO_voidSetPinVal>
	}
 }
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000

08000770 <main>:
//  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
//#endif


int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0

	SEV_SEGMENT_voidDisplay(8);
 8000776:	2008      	movs	r0, #8
 8000778:	f7ff ff4e 	bl	8000618 <SEV_SEGMENT_voidDisplay>
	RCC_InitSysClock();
 800077c:	f7ff fd3a 	bl	80001f4 <RCC_InitSysClock>
	/* Enable RCC for GPIOA peripheral  */
	RCC_voidEnableClock(RCC_APB2, 2);
 8000780:	2102      	movs	r1, #2
 8000782:	2002      	movs	r0, #2
 8000784:	f7ff fcf4 	bl	8000170 <RCC_voidEnableClock>
	/* Enable RCC for GPIOB peripheral */
	RCC_voidEnableClock(RCC_APB2, 3);
 8000788:	2103      	movs	r1, #3
 800078a:	2002      	movs	r0, #2
 800078c:	f7ff fcf0 	bl	8000170 <RCC_voidEnableClock>
	/* Enable RCC for GPIOC peripheral */
	RCC_voidEnableClock(RCC_APB2, 4);
 8000790:	2104      	movs	r1, #4
 8000792:	2002      	movs	r0, #2
 8000794:	f7ff fcec 	bl	8000170 <RCC_voidEnableClock>
	NVIC_voidEnableInterrupt(1);
 8000798:	2001      	movs	r0, #1
 800079a:	f7ff fe8f 	bl	80004bc <NVIC_voidEnableInterrupt>

	GPIO_voidSetPinDirection(GPIOA, PIN1, OUTPUT_2MHZ_PUSH_PULL);
 800079e:	2202      	movs	r2, #2
 80007a0:	2101      	movs	r1, #1
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff fd36 	bl	8000214 <GPIO_voidSetPinDirection>

	u16 w=1000;
 80007a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ac:	80fb      	strh	r3, [r7, #6]
    /* Loop forever */
	LED_voidOn(LED_1);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff fed2 	bl	8000558 <LED_voidOn>
	SEV_SEGMENT_voidDisplay(2);
 80007b4:	2002      	movs	r0, #2
 80007b6:	f7ff ff2f 	bl	8000618 <SEV_SEGMENT_voidDisplay>
	while(1)
	{
		GPIO_voidSetPinVal(GPIOA, PIN1, GPIO_HIGH);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2101      	movs	r1, #1
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff fe00 	bl	80003c4 <GPIO_voidSetPinVal>
		for(u16 i=0;i<w;i++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	81fb      	strh	r3, [r7, #14]
 80007c8:	e00d      	b.n	80007e6 <main+0x76>
		{
			for(u16 j=0;i<w;j++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	81bb      	strh	r3, [r7, #12]
 80007ce:	e003      	b.n	80007d8 <main+0x68>
			{
				asm("NOP");
 80007d0:	bf00      	nop
			for(u16 j=0;i<w;j++)
 80007d2:	89bb      	ldrh	r3, [r7, #12]
 80007d4:	3301      	adds	r3, #1
 80007d6:	81bb      	strh	r3, [r7, #12]
 80007d8:	89fa      	ldrh	r2, [r7, #14]
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d3f7      	bcc.n	80007d0 <main+0x60>
		for(u16 i=0;i<w;i++)
 80007e0:	89fb      	ldrh	r3, [r7, #14]
 80007e2:	3301      	adds	r3, #1
 80007e4:	81fb      	strh	r3, [r7, #14]
 80007e6:	89fa      	ldrh	r2, [r7, #14]
 80007e8:	88fb      	ldrh	r3, [r7, #6]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d3ed      	bcc.n	80007ca <main+0x5a>
			}
		}
		//GPIO_voidSetPinVal(GPIOA, PIN0, GPIO_LOW);
		for(u16 i=0;i<w;i++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	817b      	strh	r3, [r7, #10]
 80007f2:	e00d      	b.n	8000810 <main+0xa0>
				{
					for(u16 j=0;i<w;j++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	813b      	strh	r3, [r7, #8]
 80007f8:	e003      	b.n	8000802 <main+0x92>
					{
						asm("NOP");
 80007fa:	bf00      	nop
					for(u16 j=0;i<w;j++)
 80007fc:	893b      	ldrh	r3, [r7, #8]
 80007fe:	3301      	adds	r3, #1
 8000800:	813b      	strh	r3, [r7, #8]
 8000802:	897a      	ldrh	r2, [r7, #10]
 8000804:	88fb      	ldrh	r3, [r7, #6]
 8000806:	429a      	cmp	r2, r3
 8000808:	d3f7      	bcc.n	80007fa <main+0x8a>
		for(u16 i=0;i<w;i++)
 800080a:	897b      	ldrh	r3, [r7, #10]
 800080c:	3301      	adds	r3, #1
 800080e:	817b      	strh	r3, [r7, #10]
 8000810:	897a      	ldrh	r2, [r7, #10]
 8000812:	88fb      	ldrh	r3, [r7, #6]
 8000814:	429a      	cmp	r2, r3
 8000816:	d3ed      	bcc.n	80007f4 <main+0x84>
		GPIO_voidSetPinVal(GPIOA, PIN1, GPIO_HIGH);
 8000818:	e7cf      	b.n	80007ba <main+0x4a>
	...

0800081c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800081e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000820:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <LoopForever+0x6>)
  ldr r1, =_edata
 8000826:	490d      	ldr	r1, [pc, #52]	; (800085c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000828:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <LoopForever+0xe>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800083c:	4c0a      	ldr	r4, [pc, #40]	; (8000868 <LoopForever+0x16>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800084a:	f000 f811 	bl	8000870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084e:	f7ff ff8f 	bl	8000770 <main>

08000852 <LoopForever>:

LoopForever:
  b LoopForever
 8000852:	e7fe      	b.n	8000852 <LoopForever>
  ldr   r0, =_estack
 8000854:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000860:	080008d8 	.word	0x080008d8
  ldr r2, =_sbss
 8000864:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000868:	20000070 	.word	0x20000070

0800086c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC1_2_IRQHandler>
	...

08000870 <__libc_init_array>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	2600      	movs	r6, #0
 8000874:	4d0c      	ldr	r5, [pc, #48]	; (80008a8 <__libc_init_array+0x38>)
 8000876:	4c0d      	ldr	r4, [pc, #52]	; (80008ac <__libc_init_array+0x3c>)
 8000878:	1b64      	subs	r4, r4, r5
 800087a:	10a4      	asrs	r4, r4, #2
 800087c:	42a6      	cmp	r6, r4
 800087e:	d109      	bne.n	8000894 <__libc_init_array+0x24>
 8000880:	f000 f81a 	bl	80008b8 <_init>
 8000884:	2600      	movs	r6, #0
 8000886:	4d0a      	ldr	r5, [pc, #40]	; (80008b0 <__libc_init_array+0x40>)
 8000888:	4c0a      	ldr	r4, [pc, #40]	; (80008b4 <__libc_init_array+0x44>)
 800088a:	1b64      	subs	r4, r4, r5
 800088c:	10a4      	asrs	r4, r4, #2
 800088e:	42a6      	cmp	r6, r4
 8000890:	d105      	bne.n	800089e <__libc_init_array+0x2e>
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f855 3b04 	ldr.w	r3, [r5], #4
 8000898:	4798      	blx	r3
 800089a:	3601      	adds	r6, #1
 800089c:	e7ee      	b.n	800087c <__libc_init_array+0xc>
 800089e:	f855 3b04 	ldr.w	r3, [r5], #4
 80008a2:	4798      	blx	r3
 80008a4:	3601      	adds	r6, #1
 80008a6:	e7f2      	b.n	800088e <__libc_init_array+0x1e>
 80008a8:	080008d0 	.word	0x080008d0
 80008ac:	080008d0 	.word	0x080008d0
 80008b0:	080008d0 	.word	0x080008d0
 80008b4:	080008d4 	.word	0x080008d4

080008b8 <_init>:
 80008b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ba:	bf00      	nop
 80008bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008be:	bc08      	pop	{r3}
 80008c0:	469e      	mov	lr, r3
 80008c2:	4770      	bx	lr

080008c4 <_fini>:
 80008c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c6:	bf00      	nop
 80008c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ca:	bc08      	pop	{r3}
 80008cc:	469e      	mov	lr, r3
 80008ce:	4770      	bx	lr
